//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Foundation {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   Classe de ressource fortement typée destinée, entre autres, à la recherche de chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ResX {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        internal ResX() {
        }
        
        /// <summary>
        ///    Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Foundation.ResX", typeof(ResX).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///    Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///    les recherches de ressources utilisant cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The string argument &apos;{argumentName}&apos; cannot be empty..
        /// </summary>
        public static string ArgumentIsEmpty {
            get {
                return ResourceManager.GetString("ArgumentIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The property &apos;{property}&apos; of the argument &apos;{argument}&apos; cannot be null..
        /// </summary>
        public static string ArgumentPropertyNull {
            get {
                return ResourceManager.GetString("ArgumentPropertyNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The collection argument &apos;{argumentName}&apos; must contain at least one element..
        /// </summary>
        public static string CollectionArgumentIsEmpty {
            get {
                return ResourceManager.GetString("CollectionArgumentIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à A key cannot be configured on &apos;{derivedType}&apos; because it is a derived type. The key must be configured on the root type &apos;{rootType}&apos;..
        /// </summary>
        public static string DerivedEntityKey {
            get {
                return ResourceManager.GetString("DerivedEntityKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The annotation &apos;{annotation}&apos; cannot be added because an annotation with the same name already exists..
        /// </summary>
        public static string DuplicateAnnotation {
            get {
                return ResourceManager.GetString("DuplicateAnnotation", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The entity &apos;{entity}&apos; cannot be added to the model because an entity with the same name already exists..
        /// </summary>
        public static string DuplicateEntity {
            get {
                return ResourceManager.GetString("DuplicateEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The key {key} cannot be added to the entity type &apos;{entityType}&apos; because a key on the same properties already exists on entity type &apos;{duplicateEntityType}&apos;..
        /// </summary>
        public static string DuplicateKey {
            get {
                return ResourceManager.GetString("DuplicateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The base entity cannot be added to the entity because a base entity is already defined..
        /// </summary>
        public static string EntityBaseTypeAlreadyDefined {
            get {
                return ResourceManager.GetString("EntityBaseTypeAlreadyDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à Une clé primaire existe déjà..
        /// </summary>
        public static string EntityKeyAlreadyExists {
            get {
                return ResourceManager.GetString("EntityKeyAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The specified entity type &apos;{entityType}&apos; is invalid. It should be either the dependent entity type &apos;{dependentType}&apos; or the principal entity type &apos;{principalType}&apos;..
        /// </summary>
        public static string EntityTypeNotInRelationshipStrict {
            get {
                return ResourceManager.GetString("EntityTypeNotInRelationshipStrict", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à Navigation and inverse properties must define the same association table name..
        /// </summary>
        public static string IncoherentAssociationTableNames {
            get {
                return ResourceManager.GetString("IncoherentAssociationTableNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The specified key properties {key} are not declared on the entity type &apos;{entityType}&apos;. Ensure key properties are declared on the target entity type..
        /// </summary>
        public static string KeyPropertiesWrongEntity {
            get {
                return ResourceManager.GetString("KeyPropertiesWrongEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à The property &apos;{property}&apos; cannot be part of a key on &apos;{entityType}&apos; because it is contained in a foreign key defined on a derived entity type..
        /// </summary>
        public static string KeyPropertyInForeignKey {
            get {
                return ResourceManager.GetString("KeyPropertyInForeignKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Recherche une chaîne localisée similaire à A key on entity type &apos;{entityType}&apos; cannot contain the property &apos;{property}&apos; because it is nullable/optional. All properties on which a key is declared must be marked as non-nullable/required..
        /// </summary>
        public static string NullableKey {
            get {
                return ResourceManager.GetString("NullableKey", resourceCulture);
            }
        }
    }
}
